package com.blockchaintp.utils;

import sawtooth.sdk.signing.Context;
import sawtooth.sdk.signing.CryptoFactory;
import sawtooth.sdk.signing.PrivateKey;
import sawtooth.sdk.signing.PublicKey;
import sawtooth.sdk.signing.Signer;

/**
 * An implementation of an in-memory key manager and signer.
 */
public final class InMemoryKeyManager implements KeyManager {

  /**
   * Creates an instance of secp256k1 based manager with a random private key and
   * corresponding public key.
   * @return KeyManager.
   */
  public static KeyManager createSECP256k1() {
    return new InMemoryKeyManager("secp256k1");
  }

  /**
   * Creates an instance of secp256k1 based manager with the provided private key and
   * public key.
   * @param privKey the private key
   * @param pubKey a corresponding public key
   * @return KeyManager.
   */
  public static KeyManager createSECP256k1(final PrivateKey privKey, final PublicKey pubKey) {
    return new InMemoryKeyManager("secp256k1", privKey, pubKey);
  }

  private final PrivateKey privateKey;
  private final PublicKey publicKey;
  private final Signer signer;

  private InMemoryKeyManager(final String algoName) {
    Context context = CryptoFactory.createContext(algoName);
    this.privateKey = context.newRandomPrivateKey();
    this.publicKey = context.getPublicKey(privateKey);
    this.signer = new Signer(context, privateKey);
  }

  private InMemoryKeyManager(final String algoName, final PrivateKey privKey, final PublicKey pubKey) {
    Context context = CryptoFactory.createContext(algoName);
    this.privateKey = privKey;
    this.publicKey = pubKey;
    this.signer = new Signer(context, privateKey);
  }

  /**
   * An accessor to a private key generated this manager.
   * @return PrivateKey.
   */
  @Override
  public PrivateKey getPrivateKey() {
    return this.privateKey;
  }

  /**
   * An accessor to a public key generated by this manager.
   * @return PublicKey.
   */
  @Override
  public PublicKey getPublicKey() {
    return this.publicKey;
  }

  /**
   * An accessor to the hex value of the public key generated by this manager.
   * @return String representation of the hex value of public key.
   */
  @Override
  public String getPublicKeyInHex() {
    return this.getPublicKey().hex();
  }

  /**
   * A signing method.
   * @param item to be signed.
   * @return String representation of signed item.
   */
  @Override
  public String sign(final byte[] item) {
    return this.signer.sign(item);
  }
}
